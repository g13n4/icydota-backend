"""new_view

Revision ID: b5ac0c774967
Revises: 2dfcb08644b7
Create Date: 2024-02-26 02:31:06.554636

"""
from typing import Sequence, Union

from alembic import op
from sqlmodel import text
from sqlmodel.orm.session import Session


# revision identifiers, used by Alembic.
revision: str = 'b5ac0c774967'
down_revision: Union[str, None] = '2dfcb08644b7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with Session(bind=op.get_bind()) as sqlmodel_session:
        sqlmodel_session.execute(
            text("""
CREATE VIEW performance_window_view AS
SELECT
    games.id as match_id,
    games.league_id,
    games.dire_win,
    games.average_roshan_window_time,
    games.first_ten_kills_dire,
    games.dire_lost_first_tower,


    players_game_data.team_id,
    players_game_data.player_id,
    players_game_data.position_id,
    players_game_data.hero_id,
    players_game_data.slot,
    players_game_data.lane,
    players_game_data.is_roaming,
    players_game_data.win,
    players_game_data.dire,
    players_game_data.rank,
    players_game_data.apm,
    players_game_data.pings,


    games_performance.is_comparison,
    games_performance.comparison_id,
    games_performance.is_aggregation,
    games_performance.aggregation_id,


    comparison_types.flat,
    comparison_types.basic,
    comparison_types.player_cpd_id,
    comparison_types.player_cps_id,
    comparison_types.hero_cpd_id,
    comparison_types.hero_cps_id,
    comparison_types.pos_cpd_id,
    comparison_types.pos_cps_id,


    data_aggregation_types.league_id as agg_league_id,
    data_aggregation_types.by_win as agg_by_win,
    data_aggregation_types.less3 as agg_less3,
    data_aggregation_types.by_player as agg_by_player,
    data_aggregation_types.player_id as agg_player_id,
    data_aggregation_types.by_hero as agg_by_hero,
    data_aggregation_types.hero_id as agg_hero_id,
    data_aggregation_types.by_hero_pos_spec as agg_by_hero_pos_spec,
    data_aggregation_types.by_position as agg_by_position,
    data_aggregation_types.position_id as agg_position_id,    


    performance_windows_data.data_type_id,
    performance_windows_data.l2,
    performance_windows_data.l4,
    performance_windows_data.l6,
    performance_windows_data.l8,
    performance_windows_data.l10,
    performance_windows_data.ltotal,
    performance_windows_data.g15,
    performance_windows_data.g30,
    performance_windows_data.g45,
    performance_windows_data.g60,
    performance_windows_data.g60plus,
    performance_windows_data.gtotal

FROM
  performance_windows_data

  INNER JOIN games_performance ON (games_performance.id = performance_windows_data.game_performance_id)

  LEFT JOIN players_game_data ON (games_performance.player_game_data_id = players_game_data.id)
  LEFT JOIN games ON (players_game_data.game_id = games.id)

  LEFT JOIN data_aggregation_types ON (games_performance.aggregation_id = data_aggregation_types.id)
  LEFT JOIN comparison_types ON (games_performance.comparison_id = comparison_types.id)
;
"""))
        # total data
        sqlmodel_session.execute(
            text("""
        CREATE VIEW performance_total_view AS
SELECT 
GAMES.ID AS MATCH_ID,
GAMES.LEAGUE_ID,
GAMES.DIRE_WIN,
GAMES.AVERAGE_ROSHAN_WINDOW_TIME,
GAMES.FIRST_TEN_KILLS_DIRE,
GAMES.DIRE_LOST_FIRST_TOWER,

PLAYERS_GAME_DATA.TEAM_ID,
PLAYERS_GAME_DATA.PLAYER_ID,
PLAYERS_GAME_DATA.POSITION_ID,
PLAYERS_GAME_DATA.HERO_ID,
PLAYERS_GAME_DATA.SLOT,
PLAYERS_GAME_DATA.LANE,
PLAYERS_GAME_DATA.IS_ROAMING,
PLAYERS_GAME_DATA.WIN,
PLAYERS_GAME_DATA.DIRE,
PLAYERS_GAME_DATA.RANK,
PLAYERS_GAME_DATA.APM,
PLAYERS_GAME_DATA.PINGS,

GAMES_PERFORMANCE.IS_COMPARISON,
GAMES_PERFORMANCE.COMPARISON_ID,
GAMES_PERFORMANCE.IS_AGGREGATION,
GAMES_PERFORMANCE.AGGREGATION_ID,

COMPARISON_TYPES.FLAT,
COMPARISON_TYPES.basic,
COMPARISON_TYPES.PLAYER_CPD_ID,
COMPARISON_TYPES.PLAYER_CPS_ID,
COMPARISON_TYPES.HERO_CPD_ID,
COMPARISON_TYPES.HERO_CPS_ID,
COMPARISON_TYPES.POS_CPD_ID,
COMPARISON_TYPES.POS_CPS_ID,

DATA_AGGREGATION_TYPES.LEAGUE_ID AS AGG_LEAGUE_ID,
DATA_AGGREGATION_TYPES.BY_WIN AS AGG_BY_WIN,
DATA_AGGREGATION_TYPES.BY_PLAYER AS AGG_BY_PLAYER,
DATA_AGGREGATION_TYPES.PLAYER_ID AS AGG_PLAYER_ID,
DATA_AGGREGATION_TYPES.BY_HERO AS AGG_BY_HERO,
DATA_AGGREGATION_TYPES.HERO_ID AS AGG_HERO_ID,
data_aggregation_types.less3 as agg_less3,
DATA_AGGREGATION_TYPES.BY_HERO_POS_SPEC AS AGG_BY_HERO_POS_SPEC,
DATA_AGGREGATION_TYPES.BY_POSITION AS AGG_BY_POSITION,
DATA_AGGREGATION_TYPES.POSITION_ID AS AGG_POSITION_ID,

PERFORMANCE_TOTALS_DATA.TOTAL_GOLD,
PERFORMANCE_TOTALS_DATA.TOTAL_XP,
PERFORMANCE_TOTALS_DATA.KILLS_PER_MIN,
PERFORMANCE_TOTALS_DATA.KDA,
PERFORMANCE_TOTALS_DATA.NEUTRAL_KILLS,
PERFORMANCE_TOTALS_DATA.TOWER_KILLS,
PERFORMANCE_TOTALS_DATA.COURIER_KILLS,
PERFORMANCE_TOTALS_DATA.LANE_KILLS,
PERFORMANCE_TOTALS_DATA.HERO_KILLS,
PERFORMANCE_TOTALS_DATA.OBSERVER_KILLS,
PERFORMANCE_TOTALS_DATA.SENTRY_KILLS,
PERFORMANCE_TOTALS_DATA.ROSHAN_KILLS,
PERFORMANCE_TOTALS_DATA.RUNES_PICKED_UP,
PERFORMANCE_TOTALS_DATA.ANCIENT_KILLS,
PERFORMANCE_TOTALS_DATA.BUYBACK_COUNT,
PERFORMANCE_TOTALS_DATA.OBSERVER_USES,
PERFORMANCE_TOTALS_DATA.SENTRY_USES,
PERFORMANCE_TOTALS_DATA.LANE_EFFICIENCY,
PERFORMANCE_TOTALS_DATA.LANE_EFFICIENCY_PCT,
PERFORMANCE_TOTALS_DATA.FIRST_BLOOD_CLAIMED,
PERFORMANCE_TOTALS_DATA.FIRST_KILL_TIME,
PERFORMANCE_TOTALS_DATA.DIED_FIRST,
PERFORMANCE_TOTALS_DATA.LOST_TOWER_FIRST,
PERFORMANCE_TOTALS_DATA.LOST_TOWER_LANE,
PERFORMANCE_TOTALS_DATA.FIRST_DEATH_TIME,
PERFORMANCE_TOTALS_DATA.DESTROYED_TOWER_FIRST,
PERFORMANCE_TOTALS_DATA.DESTROYED_TOWER_LANE,
PERFORMANCE_TOTALS_DATA.DESTROYED_TOWER_TIME
FROM PERFORMANCE_TOTALS_DATA

INNER JOIN GAMES_PERFORMANCE ON (GAMES_PERFORMANCE.ID = PERFORMANCE_TOTALS_DATA.GAME_PERFORMANCE_ID)
LEFT JOIN PLAYERS_GAME_DATA ON (GAMES_PERFORMANCE.PLAYER_GAME_DATA_ID = PLAYERS_GAME_DATA.ID)
LEFT JOIN GAMES ON (PLAYERS_GAME_DATA.GAME_ID = GAMES.ID)
LEFT JOIN DATA_AGGREGATION_TYPES ON (GAMES_PERFORMANCE.AGGREGATION_ID = DATA_AGGREGATION_TYPES.ID)
LEFT JOIN COMPARISON_TYPES ON (GAMES_PERFORMANCE.COMPARISON_ID = COMPARISON_TYPES.ID) ;
        """))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with Session(bind=op.get_bind()) as sqlmodel_session:
        sqlmodel_session.execute(
            text("""DROP VIEW IF EXISTS performance_window_view""")
        )
        sqlmodel_session.execute(
            text("""DROP VIEW IF EXISTS performance_total_view""")
        )
