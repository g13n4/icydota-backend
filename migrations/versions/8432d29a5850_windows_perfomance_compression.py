"""windows_perfomance_compression

Revision ID: 8432d29a5850
Revises: 4f02779ae5c2
Create Date: 2024-06-25 02:21:09.569005

"""
from typing import Sequence, Union

from db import SQLModel
import sqlmodel.sql.sqltypes

from alembic import op
import sqlalchemy as sa
from sqlmodel import text
from sqlmodel.orm.session import Session

# revision identifiers, used by Alembic.
revision: str = '8432d29a5850'
down_revision: Union[str, None] = '4f02779ae5c2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('performance_windows_data', sa.Column('l_empty_mask', sa.SMALLINT(), nullable=True))
    op.add_column('performance_windows_data', sa.Column('g_empty_mask', sa.SMALLINT(), nullable=True))
    # ### end Alembic commands ###
    with Session(bind=op.get_bind()) as sqlmodel_session:
        sqlmodel_session.execute(
            text("""
            CREATE OR REPLACE FUNCTION to_mask(VARIADIC numeric[]) 
            RETURNS smallint AS $$
            DECLARE
            result text := '';
	        var numeric;
            only_nones bool = true;
            BEGIN
            FOREACH var IN ARRAY $1
            LOOP
            if -0.000002 < var and var < 0.000002 then
            result := result || 1;
            only_nones := false;
            elsif var is null then
            result := result || 0;
            else
            return Null;
            end if;
            END LOOP;
            if only_nones then
            return Null;
            end if;
            RETURN lpad(result, 10, '0')::bit(10)::int;
            END;
            $$ LANGUAGE PLPGSQL;
            """),
        )
        # setting mask values
        print('Setting empty mask value')
        sqlmodel_session.execute(
            text("""UPDATE performance_windows_data 
            SET l_empty_mask = to_mask(l2, l4, l6, l8, l10, ltotal)
            SET g_empty_mask = to_mask(g15, g30, g45, g60, g60plus, gtotal)
            """),
        )
        # setting null to 0 columns
        print('Setting null to l* values')
        sqlmodel_session.execute(
            text("""UPDATE performance_windows_data 
                    SET 
                    l2 = NULL
                    l4 = NULL
                    l6 = NULL
                    l8 = NULL
                    l10 = NULL
                    ltotal = NULL
                    WHERE l_empty_mask IS NOT NULL
                    """),
        )

        print('Setting null to g* values')
        sqlmodel_session.execute(
            text("""UPDATE performance_windows_data
                    g15 = NULL
                    g30 = NULL
                    g45 = NULL
                    g60 = NULL
                    g60plus = NULL
                    gtotal = NULL
                    WHERE g_empty_mask IS NOT NULL
                    """),
        )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('performance_windows_data', 'g_empty_mask')
    op.drop_column('performance_windows_data', 'l_empty_mask')
    # ### end Alembic commands ###
